#include <pigpio.h>
#include <stdio.h>

int main() {
    gpioInitialise();
    int sensor;
    if((sensor = i2cOpen(1, 0x28, 0)) < 0) {
        printf("i2c open failed\n");
        return 1;
    }
    i2cReadByteData(sensor, 0x16);

    // proprietary setup stuff
    i2cWriteByteData(sensor, 0x0207, 0x01);
    i2cWriteByteData(sensor, 0x0208, 0x01);
    i2cWriteByteData(sensor, 0x0096, 0x00);
    i2cWriteByteData(sensor, 0x0097, 0xfd);
    i2cWriteByteData(sensor, 0x00e3, 0x00);
    i2cWriteByteData(sensor, 0x00e4, 0x04);
    i2cWriteByteData(sensor, 0x00e5, 0x02);
    i2cWriteByteData(sensor, 0x00e6, 0x01);
    i2cWriteByteData(sensor, 0x00e7, 0x03);
    i2cWriteByteData(sensor, 0x00f5, 0x02);
    i2cWriteByteData(sensor, 0x00d9, 0x05);
    i2cWriteByteData(sensor, 0x00db, 0xce);
    i2cWriteByteData(sensor, 0x00dc, 0x03);
    i2cWriteByteData(sensor, 0x00dd, 0xf8);
    i2cWriteByteData(sensor, 0x009f, 0x00);
    i2cWriteByteData(sensor, 0x00a3, 0x3c);
    i2cWriteByteData(sensor, 0x00b7, 0x00);
    i2cWriteByteData(sensor, 0x00bb, 0x3c);
    i2cWriteByteData(sensor, 0x00b2, 0x09);
    i2cWriteByteData(sensor, 0x00ca, 0x09);
    i2cWriteByteData(sensor, 0x0198, 0x01);
    i2cWriteByteData(sensor, 0x01b0, 0x17);
    i2cWriteByteData(sensor, 0x01ad, 0x00);
    i2cWriteByteData(sensor, 0x00ff, 0x05);
    i2cWriteByteData(sensor, 0x0100, 0x05);
    i2cWriteByteData(sensor, 0x0199, 0x05);
    i2cWriteByteData(sensor, 0x01a6, 0x1b);
    i2cWriteByteData(sensor, 0x01ac, 0x3e);
    i2cWriteByteData(sensor, 0x01a7, 0x1f);
    i2cWriteByteData(sensor, 0x0030, 0x00);

    // recommended setup stuff
    i2cWriteByteData(sensor, 0x0011, 0x10);
    i2cWriteByteData(sensor, 0x010a, 0x30);
    i2cWriteByteData(sensor, 0x003f, 0x46);
    i2cWriteByteData(sensor, 0x0031, 0xff);
    i2cWriteByteData(sensor, 0x0040, 0x63);
    i2cWriteByteData(sensor, 0x002e, 0x01);

    int reading = 0;
    while(1) {
        // wait until ready
        while(!i2cReadByteData(sensor, 0x004d) & (1<<0));
        // start measurment
        i2cWriteByteData(sensor, 0x0018, 0x01);
        while(!i2cReadByteData(sensor, 0x004f) & (1<<2));
        reading = i2cReadByteData(sensor, 0x0062);
        printf("%04dmm\n", reading);
        time_sleep(.5);
    }

    i2cClose(sensor);
    return 0;
    // i2cWriteByteData(sensor, reg, val);
}
